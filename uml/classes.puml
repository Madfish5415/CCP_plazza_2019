@startuml

namespace kitchen {

enum CState {
    Working,
    Finished
}
Cook +-- CState

class Cook {
    - Kitchen &_kitchen;
    - State _state;
    - std::thread _thread;
    - std::list<std::shared_ptr<pizza::Pizza>> _pizzas;

    + Cook(Kitchen& kitchen);
    + ~Cook() override;

    + std::list<std::shared_ptr<pizza::Pizza>>& getPizzas() const;
    + State getState() const;
    + void setState(State state);

    + bool handle(const std::shared_ptr<pizza::Pizza> pizza);
    + void status() const;

    - void cook() override;
}

enum KState {
    Working,
    Finished
}
Kitchen +-- KState

class KSettings {
    + unsigned int cooks
    + unsigned int maxPizzasPerCook
    + unsigned float multiplier
}
Kitchen +-- KSettings

class Kitchen {
    - Settings _settings;
    - Storage _storage;
    - Waiter _waiter;
    - State _state;
    - std::list<ICook> _cooks;

    + Kitchen(const Settings& description, const std::map<std::string, unsigned int>& ingredients, const std::string& receiver, const std::string& sender);
    + ~Kitchen();

    + Settings& getSettings() const;
    + Storage& getStorage() const;

    + void ready(const std::shared_ptr<pizza::Pizza> pizza);
    + void status() const;

    - void cook();
    - void give(const std::shared_ptr<pizza::Pizza> pizza);
}

class Storage {
    - std::map<std::string, unsigned int> _ingredients;
    - std::mutex _mutex;

    + Storage(const std::map<std::string, unsigned int>& ingredients);
    + ~Storage() override;

    + void add(const std::map<std::string, int>& ingredients);
    + bool has(const std::map<std::string, int>& ingredients) const;
    + void remove(const std::map<std::string, int>& ingredients);
}

}

namespace mq {

class POSIX {
    - std::string _name;
    - int _flags;
    - attr atrr;
    - int _fd;

    + POSIX();
    + POSIX(std::string name, int flags);
    + POSIX(std::string name, int flags, int mode, const attr& attr);
    + ~POSIX();

    + std::string getName();
    + attr getAttr();

    + void close();
    + std::string receive(unsigned int *priority);
    + void send(const std::string& message, unsigned int priority);
}

class Waiter {
    - POSIX _receiver;
    - POSIX _sender;

    + Waiter();
    + Waiter(const std::string& receiver, const std::string& sender);
    + Waiter(const std::string& receiver, const std::string& sender, int flags);
    + ~Waiter();

    + void close();
    + std::vector<std::string> receive(unsigned int *priority);
    + void send(const std::vector<std::string>& message, unsigned int priority);
}

}

namespace pizza {

class Factory {
    + Factory();
    + ~Factory();
}

class Pizza {
    - Recipe _recipe;
    - std::string _size;
    - int _order;

    + Pizza();
    + Pizza(Recipe recipe, const std::string& size, int order);
    + ~Pizza();

    + const Recipe& getRecipe() const;
    + std::string getSize() const;
    + int getOrder();

    + std::string pack() const;
    + void unpack(const std::string& pack);
}

class Recipe {
    + std::string _type;
    + std::map<std::string, unsigned int> _ingredients;
    + int _cookTime;

    + Recipe();
    + Recipe(const std::string& type, const std::map<std::string, unsigned int>& ingredients, int cookTime);
    + ~Recipe();

    + std::string getType() const;
    + const std::map<std::string, unsigned int>& getIngredients() const;
    + int getCookTime() const;

    + std::string pack() const;
    + void unpack(const std::string& pack);
}

class Recipes {
    + std::map<std::string, Recipe> _recipes;

    + Recipes();
    + ~Recipes();

    + bool has(const std::string& recipe);

    + void load(const std::string& path);
}

class Sizes {
    + std::set<std::string> _ingredients;

    + Sizes();
    + ~Sizes();

    + bool has(const std::string& size) const;

    + void load(const std::string& path);
}

}

namespace process {

class Kitchen {
    - unsigned int _cooks;
    - Waiter _waiter;
    - Process _process;
    - unsigned int _pizzas;
    - std::chrono _last;

    + Kitchen(unsigned int cooks, const std::map<std::string, unsigned int>& ingredients, const std::string& receiver, const std::string& sender);
    + ~Kitchen();

    + unsigned int getPizzas() const;
    + std::chrono getLast() const;

    + bool handle(const pizza::Pizza& pizza);
    + void status();
}

class This {
    + static int getId();

    + template<typename R, typename P> static void sleepFor(std::chrono::duration<R, P> time);
}

class Process {
    - int _id;
    - int _status;

    + Process();
    + template<typename Callable, typename... Args> explicit Process(Callable&& callable, Args&&... args);
    + ~Process();

    + int getId() const;
    + int getStatus() const;

    + void join();
}

}

namespace reception {

class Input {
    + static void clear();
    + static std::string get();
}

class Manager {
    - std::map<std::string, unsigned int> _ingredients;
    - std::list<Kitchen> _kitchens;
    - std::map<unsigned int, Order> _orders;
    - std::thread _thread;

    + Manager(unsigned int cooks, const std::map<std::string, unsigned int>& ingredients);
    + ~Manager();

    + void handle(const Order& order);
    + void manage();
    + void status();

    - void createKitchen()
    - void updateKitchens();
    - void updateOrders();
}

class Order {
    - std::queue<pizza::Pizza> pending;
    - std::queue<pizza::Pizza> ready;

    + Order();
    + ~Order();
}

class Parser {
    + explicit Parser(const std::string& command);
    + ~Parser();

    + Order parse();
}

class Reception() {
    + Reception();
    + ~Reception();

    + void run(float multiplier, unsigned int cooks, unsigned int interval);
}

}

@enduml
