@startuml

namespace kitchen {

enum CState {
    Working,
    Finished
}
Cook +-- CState

class Cook {
    - Kitchen& _kitchen;
    - State _state;
    - std::thread _thread;
    - std::queue<std::shared_ptr<pizza::Pizza>> _pizzas;

    + Cook(const Kitchen& kitchen);
    + ~Cook();

    + std::queue<std::shared_ptr<pizza::Pizza>>& getPizzas() const;

    + bool handle(const std::shared_ptr<pizza::Pizza> pizza);
    + void status() const;

    - void cook();
}

enum KState {
    Working,
    Finished
}
Kitchen +-- KState

class KSettings {
    + unsigned int cooks
    + unsigned int maxPizzasPerCook
    + unsigned float multiplier
}
Kitchen +-- KSettings

class Kitchen {
    - Settings _settings;
    - Storage _storage;
    - mq::Waiter _waiter;
    - State _state;
    - std::list<Cook> _cooks;

    + Kitchen(const Settings& settings, const std::map<std::string, unsigned int>& ingredients, const std::string& receiver, const std::string& sender);
    + ~Kitchen();

    + Settings& getSettings();
    + Storage& getStorage() const;

    + void ready(const std::shared_ptr<pizza::Pizza> pizza);
    + void status() const;

    - void cook();
}

class Settings {
    + unsigned int cooks;
    + unsigned int maxPerCook;
    + unsigned int fillInterval;
    + float timeMultiplier;
};

class Storage {
    - std::map<std::string, unsigned int> _ingredients;
    - std::mutex _mutex;

    + Storage(const std::map<std::string, unsigned int>& ingredients);
    + ~Storage();

    + void add(const std::map<std::string, int>& ingredients);
    + bool has(const std::map<std::string, int>& ingredients) const;
    + void remove(const std::map<std::string, int>& ingredients);
}

}

namespace mq {

class Attributes {
    + long int flags;
    + long int maxMsg;
    + long int maxMsgSize;
    + long int curMsgInQueue;
    + long int _internal[4];
}
POSIX +-- Attributes

class POSIX {
    - std::string _name;
    - int _flags;
    - int _mode;
    - Attributes _attributes;
    - int _fd;

    + POSIX();
    + POSIX(std::string name, int flags);
    + POSIX(std::string name, int flags, int mode, const Attributes& attr);
    + ~POSIX();

    + std::string getName() const;
    + int getFlags() const;
    + int getMode() const;
    + Attributes& getAttributes() const;

    + void close();
    + std::string receive(unsigned int* priority);
    + void send(const std::string& message, unsigned int priority);
}

class Waiter {
    - POSIX _receiver;
    - POSIX _sender;
    - std::queue<std::string> _messages;

    + Waiter();
    + Waiter(const std::string& receiver, const std::string& sender);
    + Waiter(const std::string& receiver, const std::string& sender, int flags);
    + ~Waiter();

    + void close();
    + std::vector<std::string> receive(unsigned int* priority);
    + void send(const std::vector<std::string>& message, unsigned int priority);
    + void update();
}

}

namespace pizza {

class Factory {
    + static std::shared_ptr<Pizza> create(const std::string& recipe, const std::string& size);
}

class Ingredients {
    + static std::set<std::string>& get();

    - static std::set<std::string>& _ingredients;
};

class Pizza {
    - Recipe _recipe;
    - std::string _size;
    - unsigned int _order;

    + Pizza();
    + Pizza(const Recipe& recipe, const std::string& size, unsigned int order);
    + ~Pizza();

    + const Recipe& getRecipe() const;
    + std::string getSize() const;
    + unsigned int getOrder() const;

    + std::string pack() const;
    + void unpack(const std::string& pack);
}

class Recipe {
    - std::string _type;
    - std::map<std::string, unsigned int> _ingredients;
    - unsigned int _cookTime;

    + Recipe();
    + Recipe(const std::string& _type, const std::map<std::string, unsigned int>& ingredients, unsigned int cookTime);
    + ~Recipe();

    + std::string getType() const;
    + const std::map<std::string, unsigned int>& getIngredients() const;
    + unsigned int getCookTime() const;

    + std::string pack() const;
    + void unpack(const std::string& pack);
}

class Recipes {
    + static std::map<std::string, Recipe>& get();

    + static void load(const std::string& path);

    - static std::map<std::string, Recipe>& _recipes;
}

class Sizes {
    + static std::set<std::string>& get();

    + static void load(const std::string& size);

    - static std::set<std::string>& _sizes;
}

}

namespace process {

class Kitchen {
    - kitchen::Settings _settings;
    - mq::Waiter _waiter;
    - Process _process;
    - unsigned int _pending;
    - std::chrono::time_point<std::chrono::system_clock> _last;

    + Kitchen(const kitchen::Settings& settings, const std::map<std::string, unsigned int>& ingredients, const std::string& receiver, const std::string& sender);
    + ~Kitchen();

    + unsigned int getPending() const;
    + std::chrono::time_point<std::chrono::system_clock> getLast() const;

    + void handle(const std::shared_ptr<pizza::Pizza> pizza);
    + void status() const;
}

class This {
    + static int getId();

    + template<typename R, typename P> static void sleepFor(std::chrono::duration<R, P> time);
}

class Process {
    - int _id;
    - int _status;

    + Process();
    + template<typename T, typename... TArgs> explicit Process(T&& callable, TArgs&&... args);
    + ~Process();

    + int getId() const;
    + int getStatus() const;

    + void join();
}

}

namespace reception {

class Input {
    + static void clear();
    + static std::string get();
}

class Manager {
    - kitchen::Settings _settings;
    - std::map<std::string, unsigned int> _ingredients;
    - std::list<kitchen::Kitchen> _kitchens;
    - std::map<unsigned int, Order> _orders;
    - std::thread _thread;

    + Manager(const kitchen::Settings& settings, const std::map<std::string, unsigned int>& ingredients);
    + ~Manager();

    + void handle(const Order& order);
    + void status() const;

    + void createKitchen();
    + void updateKitchens();
    + void updateOrders();

    - void manage();
}

class Order {
    + std::queue<std::shared_ptr<pizza::Pizza>> pizzas;
    + unsigned int ready;
}

class Parser {
    + static std::shared_ptr<Order> parse(const std::string& command);
}

class Reception() {
    + Reception(const kitchen::Settings& settings);
    + Reception();

    + void run();
}

}

namespace thread {

class Print {
    - static std::recursive_mutex _mutex;
    - std::unique_lock<std::recursive_mutex> _lock;

    + Print();
    + ~Print();

    + template<typename T> Print& operator<<(const T& t);
    + Print& operator<<(std::ostream& (*os)(std::ostream&));
}

}

@enduml
